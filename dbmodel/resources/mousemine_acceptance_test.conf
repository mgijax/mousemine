#
# verify table counts 
# This has been replaced with oneSided.cfg test config in admin/test/resources
#

assert {
    sql: select count(*) > 700000 from allele;
}

assert {
    sql: select count(*) > 250000 from author;
}

assert {
    sql: select count(*) >= 51 from chromosome;
}

assert {
    sql: select count(*) > 1500000 from crossreference;
}

assert {
    sql: select count(*) > 100 from datasource;
}

assert {
    sql: select count(*) > 80000 from gene;
}

assert {
    sql: select count(*) > 45000 from genotype;
}

assert {
    sql: select count(*) > 60000 from genotypeallelepair;
}

assert {
    sql: select count(*) > 230000 from goannotation;
}

assert {
    sql: select count(*) > 30000 from goterm;
}

assert {
    sql: select count(*) > 30000 from homologue;
}

assert {
    sql: select count(*) > 80000 from location;
}

assert {
    sql: select count(*) > 8200 from mpterm;
}

assert {
    sql: select count(*) > 430000 from ontologyannotation;
}

assert {
    sql: select count(*) > 420000 from ontologyannotationevidence;
}

assert {
    sql: select count(*) > 700000 from ontologyrelation;
}

assert {
    sql: select count(*) > 51000 from ontologyterm;
}

assert {
    sql: select count(*) > 90000 from ontologytermsynonym;
}

assert {
    sql: select count(*) = 7 from organism;
    note: mouse, human, fly, rat, worm, yeast, zfin 
}

assert {
    sql: select count(*) = 1 from orthologueevidencecode;
}

assert {
    sql: select count(*) > 160000 from publication;
}

assert {
    sql: select count(*) > 1600 from soterm;
}

assert {
    sql: select count(*) > 25000 from strain;
}

assert {
    sql: select count(*) > 1800000 from synonym;
}

assert {
    sql: select count(*) > 6000 from transgene;
}



no-results {
	sql: select s.primaryidentifier from sequencefeature s, organism o , dataset d, bioentitiesdatasets bd where s.organismid = o.id and o.taxonid = 10090 and s.primaryidentifier not like 'MGI:%' and s.class not in ('org.intermine.model.bio.IntergenicRegion','org.intermine.model.bio.Chromosome') and s.id = bd.bioentities and bd.datasets = d.id and d.name = 'Mouse Gene Catalog from MGI'
	note: ensure every mouse feature has primary id that is an MGI number
}

no-results {
    sql: select * from organism where commonname is null or genus is null or species is null or shortname is null or name is null or taxonid is null
    note: all fields of all organisms should be populated
}

no-results {
	sql: select gene1.primaryidentifier, gene1.id, gene2.primaryidentifier, gene2.id from gene as gene1, gene as gene2 where gene1.primaryidentifier = gene2.primaryidentifier and gene1.id <> gene2.id
	note: every gene should have a unique identifier
}

no-results {
	sql: select * from gene where primaryidentifier is null
	note: every gene record should have a primary identifier
}






